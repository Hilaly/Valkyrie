#lexer

'(?<value>[^']*)' -> STRING
"(?<value>[^"]*)" -> STRING
(true|false) -> BOOL
(null|NULL|NIL) -> NULL
([\d]+(\.[\d]+)?|\.[\d]+) -> NUMBER
(\w|<|>)* -> IDENTIFIER

\$ -> VAR_ID

(=>) -> RULE_OP
(:) -> COLON

(<) -> TAG_OPEN
(>) -> TAG_CLOSE

[ \n\r\t]+ -> escape

(\.) -> SENTENCE_OP
(,) -> COMMA

(\+|\-) -> ADD_OP

#parser

<root> -> <rule>+

<rule> -> <rule_name> COLON RULE_OP <rule_bnf> RULE_OP <rule_actions> SENTENCE_OP | <rule_name> COLON RULE_OP <rule_bnf> SENTENCE_OP

<rule_name> -> <id>

<rule_bnf> -> <rule_bnf_entry>+
<rule_bnf_entry> -> <rule_var> | <rule_op> | <rule_bnf_match>
<rule_var> -> VAR_ID <id>
<rule_op> -> STRING
<rule_bnf_match> -> <id>

<id> -> IDENTIFIER

<rule_actions> -> <rule_action> "," <rule_actions> | <rule_action>

<rule_action> -> <add_base_type_action> | <create_type_action> | <skip_action>

<skip_action> -> "skip"
<create_type_action> -> "create" "class" <final_str_literal> | "create" "struct" <final_str_literal>

<add_base_type_action> -> "add" "base" <final_str_literal> to <final_str_literal>

<final_str_literal> -> <add_words_op>
<add_words_op> -> <word> ADD_OP <add_words_op> | <word>
<word> -> <id> | <string>

<string> -> STRING
