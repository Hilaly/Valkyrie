###### This is simple example of some expression.
<!-- And this is HTML like comment -->

## Entities: X.
<entities_creation>:
    => "Entities :" <entities_list>
    => call <entities_list>.

<entities_list>:
    => <entity_list_define> <entities_list>
    => call <entity_list_define>, call <entities_list>.
<entities_list>:
    => <entity_list_define>
    => call <entity_list_define>.
<entity_list_define>:
    => <list_marker> <entity_define>
    => call <entity_define>.
<entity_define>:
    => $entityType
    => log "Entity " + $entityType,
     create class $entityType,
     add base "NaiveEntity.GamePrototype.EntProto.EntityWrapper" to $entityType,
     set global $entityType + "isEntity" = $entityType.

## X is Y property.
<typed_component_creation>:
    => $componentName "is" $valueType "property"
    => log "Component " + $componentName + " of " + $valueType,
        create class $componentName + "Component",
        add base "NaiveEntity.GamePrototype.EntProto.ValueComponent<" + $valueType + ">" to $componentName + "Component",
        set global $componentName + "Component" = $componentName,
        set global $componentName + "Value" = $valueType.


### Control sequences, this sequences skipped.
<list_marker>:
    => "- [ ]"
    => skip.
<list_marker>:
    => "-"
    => skip.
    

## X contains Y.
## X contains list(collection) of Y.

## X has Y.
<has_component>:
    => $entityName "has" $componentName
    => 
        if not global $entityName + "isEntity"
            log $entityName + " is not entity"
        else
        {
            log $entityName + " is entity"
            ## add property $componentName to $entityName,            add code "{return default;}" to property $componentName of $entityName.
        }.

## Every tick X Y.
## Every T seconds A.

## A is change X to Y.
## A is change X by Y.

